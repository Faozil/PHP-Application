AWSTemplateFormatVersion: '2010-09-09'
Description: 'PHP Application Infrastructure'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair
  
  DBUsername:
    Type: String
    Default: admin
    Description: Database username
  
  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Database password

  DockerImageUri:
    Type: String
    Description: URI of the Docker image in ECR
    Default: ""
    
  ImageTag:
    Type: String
    Description: Tag for the Docker image
    Default: latest

Conditions:
  HasDockerImage: !Not [!Equals [!Ref DockerImageUri, ""]]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: php-app-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: php-app-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: web-security-group

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: db-security-group

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: db-subnet-group

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: php-app-database
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: '8.0'
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      DBName: testdb
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: php-app-database

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: php-app-alb
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: php-app-tg
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: php-app 
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        scanOnPush: false
      Tags:
        - Key: Name
          Value: php-app-ecr

  ECRPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECRAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource: '*'
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: '*'
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribePolicies
              - autoscaling:DescribeScalingActivities
              - autoscaling:SetInstanceHealth
              - autoscaling:CompleteLifecycleAction
              - autoscaling:RecordLifecycleActionHeartbeat
            Resource: '*'
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: ec2-role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: php-app-launch-template
      LaunchTemplateData:
        ImageId: ami-00fefe800bd08f8da  
        InstanceType: t3.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker
            service docker start
            usermod -a -G docker ec2-user
            
            # Install CloudWatch agent
            yum install -y amazon-cloudwatch-agent
            
            # Check if Docker image is provided
            if [ "${DockerImageUri}" != "" ]; then
              echo "Docker image URI provided: ${DockerImageUri}"
              
              # Login to ECR and pull/run the application
              aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${DockerImageUri}
              
              # Pull and run the Docker image
              docker pull ${DockerImageUri}:${ImageTag}
              docker run -d --name php-app -p 80:80 \
                -e DB_HOST=${Database.Endpoint.Address} \
                -e DB_USERNAME=${DBUsername} \
                -e DB_PASSWORD=${DBPassword} \
                -e DB_NAME=testdb \
                -e DB_PORT=3306 \
                ${DockerImageUri}:${ImageTag}
                
              echo "Application container started successfully"
            else
              echo "No Docker image URI provided - serving placeholder page"
              
              # Install and start Apache as fallback
              yum install -y httpd
              
              # Create a placeholder page
              cat << 'HTMLEOF' > /var/www/html/index.html
            <!DOCTYPE html>
            <html>
            <head>
                <title>PHP Application - Deploying</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .status { color: #f39c12; font-size: 18px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>PHP Application</h1>
                    <p class="status">Application is being deployed...</p>
                    <p>Please wait while the application Docker image is being built and deployed.</p>
                    <p>This page will be updated automatically once the deployment is complete.</p>
                </div>
            </body>
            </html>
            HTMLEOF
              
              # Start Apache
              service httpd start
              chkconfig httpd on
              
              echo "Placeholder page served via Apache"
            fi
            
            # Create PHP metrics collection script for Docker container
            cat << 'METRICSEOF' > /usr/local/bin/php-metrics-collector.sh
            #!/bin/bash
            
            # PHP Metrics Collection Script for Dockerized Application
            # This script collects metrics from your containerized PHP application
            
            AWS_REGION="${AWS::Region}"
            NAMESPACE="PHP/Application"
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            
            # Function to send metric to CloudWatch
            send_metric() {
                local metric_name=$1
                local value=$2
                local unit=$3
                local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
                
                aws cloudwatch put-metric-data \
                    --region $AWS_REGION \
                    --namespace $NAMESPACE \
                    --metric-data MetricName=$metric_name,Value=$value,Unit=$unit,Timestamp=$timestamp
            }
            
            # Function to check if container is running
            is_container_running() {
                docker ps --format "table {{.Names}}" | grep -q "php-app"
            }
            
            # Function to get container metrics
            get_container_metrics() {
                if is_container_running; then
                    # Get container stats
                    local container_stats=$(docker stats php-app --no-stream --format "table {{.CPUPerc}},{{.MemUsage}}" | tail -n +2)
                    echo "$container_stats"
                else
                    echo "0.00%,0B / 0B"
                fi
            }
            
            # Function to collect metrics from application logs in container
            collect_app_metrics() {
                if is_container_running; then
                    # Get logs from the last minute and parse metrics
                    local logs=$(docker logs php-app --since=1m 2>&1 | grep "PHP_METRIC" || echo "")
                    
                    if [ ! -z "$logs" ]; then
                        # Count requests
                        local request_count=$(echo "$logs" | grep -c "request_count:1" || echo "0")
                        
                        # Count errors  
                        local error_count=$(echo "$logs" | grep -c "error_count:1" || echo "0")
                        
                        # Get average response time
                        local response_times=$(echo "$logs" | grep "response_time:" | sed 's/.*response_time://' | head -10)
                        local avg_response_time=0
                        if [ ! -z "$response_times" ]; then
                            avg_response_time=$(echo "$response_times" | awk '{sum+=$1; count++} END {if(count>0) print sum/count; else print 0}')
                        fi
                        
                        # Get latest memory usage
                        local memory_usage=$(echo "$logs" | grep "memory_usage:" | tail -1 | sed 's/.*memory_usage://' || echo "0")
                        
                        # Send metrics to CloudWatch
                        if [ "$request_count" -gt 0 ]; then
                            send_metric "php_requests_total" "$request_count" "Count"
                        fi
                        
                        if [ "$error_count" -gt 0 ]; then
                            send_metric "php_errors_total" "$error_count" "Count"
                        fi
                        
                        if [ "$(echo "$avg_response_time > 0" | bc -l 2>/dev/null || echo "0")" = "1" ]; then
                            send_metric "php_response_time" "$avg_response_time" "Milliseconds"
                        fi
                        
                        if [ "$memory_usage" -gt 0 ]; then
                            send_metric "php_memory_usage" "$memory_usage" "Bytes"
                        fi
                    fi
                    
                    # Try to get metrics via HTTP API if your app exposes them
                    local api_response=$(curl -s http://localhost/api/health 2>/dev/null || echo '{}')
                    local api_metrics=$(curl -s http://localhost/api/metrics 2>/dev/null || echo '{}')
                    
                    # Parse JSON response for additional metrics (if available)
                    if command -v jq >/dev/null 2>&1; then
                        local memory_from_api=$(echo "$api_metrics" | jq -r '.memory_usage // 0' 2>/dev/null || echo "0")
                        if [ "$memory_from_api" -gt 0 ]; then
                            send_metric "php_memory_usage" "$memory_from_api" "Bytes"
                        fi
                    fi
                fi
            }
            
            # Function to get process count (Docker container processes)
            get_php_processes() {
                if is_container_running; then
                    # Count processes inside the container
                    docker exec php-app ps aux 2>/dev/null | grep -c "[p]hp\|[a]pache\|[n]ginx" || echo "1"
                else
                    echo "0"
                fi
            }
            
            # Function to check application health
            check_app_health() {
                local health_status=0
                if is_container_running; then
                    # Check if application responds
                    if curl -s -o /dev/null -w "%{http_code}" http://localhost/ | grep -q "200"; then
                        health_status=1
                    fi
                fi
                send_metric "php_app_healthy" "$health_status" "Count"
            }
            
            # Main execution loop
            while true; do
                if is_container_running; then
                    echo "Collecting metrics from running container..."
                    
                    # Get PHP active processes
                    php_processes=$(get_php_processes)
                    send_metric "php_active_processes" "$php_processes" "Count"
                    
                    # Collect application-specific metrics
                    collect_app_metrics
                    
                    # Check application health
                    check_app_health
                    
                    # Get container resource usage
                    container_stats=$(get_container_metrics)
                    echo "Container stats: $container_stats"
                    
                else
                    echo "Container not running, sending zero metrics..."
                    # Send zero metrics when container is not running
                    send_metric "php_active_processes" "0" "Count"
                    send_metric "php_app_healthy" "0" "Count"
                fi
                
                sleep 60
            done
            METRICSEOF
            
            chmod +x /usr/local/bin/php-metrics-collector.sh
            
            # Create systemd service for metrics collection
            cat << 'SERVICEEOF' > /etc/systemd/system/php-metrics.service
            [Unit]
            Description=PHP Metrics Collector for Dockerized Application
            After=network.target docker.service
            Requires=docker.service
            
            [Service]
            Type=simple
            User=root
            ExecStart=/usr/local/bin/php-metrics-collector.sh
            Restart=always
            RestartSec=30
            
            [Install]
            WantedBy=multi-user.target
            SERVICEEOF
            
            # Enable and start the metrics service
            systemctl daemon-reload
            systemctl enable php-metrics.service
            systemctl start php-metrics.service
            
            # Setup CloudWatch monitoring configuration
            cat << 'CWEOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            {
              "metrics": {
                "namespace": "AWS/EC2/Custom",
                "metrics_collected": {
                  "cpu": {
                    "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                    "metrics_collection_interval": 60,
                    "totalcpu": false
                  },
                  "disk": {
                    "measurement": ["used_percent", "inodes_free"],
                    "metrics_collection_interval": 60,
                    "resources": ["*"]
                  },
                  "diskio": {
                    "measurement": ["io_time"],
                    "metrics_collection_interval": 60,
                    "resources": ["*"]
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"],
                    "metrics_collection_interval": 60
                  },
                  "docker": {
                    "measurement": ["docker_container_cpu", "docker_container_mem"],
                    "metrics_collection_interval": 60
                  }
                }
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "/aws/ec2/php-app/system",
                        "log_stream_name": "{instance_id}/messages"
                      }
                    ]
                  }
                }
              }
            }
            CWEOF
            
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
            
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: php-app-asg
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: php-app-instance
          PropagateAtLaunch: true

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNS"
  
  DatabaseEndpoint:
    Description: RDS database endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseEndpoint"

  ECRRepositoryUri:
    Description: URI of the ECR repository
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: !Sub "${AWS::StackName}-ECRRepositoryUri"